using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using AutoMapper;
using Goblin.Application.Core;
using Goblin.Application.Core.Abstractions;
using Goblin.Application.Vk.Converters;
using Goblin.Application.Vk.Options;
using Goblin.DataAccess;
using Goblin.Domain;
using Microsoft.Extensions.Options;
using Serilog;
using VkNet.Abstractions;
using VkNet.Enums;
using VkNet.Enums.SafetyEnums;
using VkNet.Model;
using VkNet.Model.GroupUpdate;
using VkNet.Model.RequestParams;
using Message = Goblin.Application.Core.Models.Message;

namespace Goblin.Application.Vk;

public class VkCallbackHandler
{
    private readonly CommandsService _commandsService;
    private readonly BotDbContext _db;
    private readonly ILogger _logger;
    private readonly IMapper _mapper;
    private readonly VkOptions _options;
    private readonly IVkApi _vkApi;
    private readonly ISender _sender;

    public VkCallbackHandler(CommandsService commandsService,
                             BotDbContext db,
                             IVkApi vkApi,
                             IEnumerable<ISender> senders,
                             IOptions<VkOptions> options,
                             IMapper mapper)
    {
        _commandsService = commandsService;
        _db = db;
        _vkApi = vkApi;
        _sender = senders.First(x => x.ConsumerType == ConsumerType.Vkontakte);
        _mapper = mapper;
        _options = options.Value;
        _logger = Log.ForContext<VkCallbackHandler>();
    }

    public async Task Handle(GroupUpdate upd)
    {
        if(upd.Secret != _options.SecretKey)
        {
            _logger.Warning("–ü—Ä–∏—à–ª–æ —Å–æ–±—ã—Ç–∏–µ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º ({0})", upd.Secret);
            return;
        }

        _logger.Debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å —Ç–∏–ø–æ–º {0}", upd.Type);

        if(upd.Type == GroupUpdateType.MessageNew)
        {
            if(upd.MessageNew.Message.Action?.Type == MessageAction.ChatInviteUser)
            {
                await _sender.Send(upd.MessageNew.Message.PeerId.Value,
                                   "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n" +
                                   "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞ –¥–ª—è –±–µ—Å–µ–¥ –∑–¥–µ—Å—å: vk.com/@japanese.goblin-conversations");
                return;
            }

            var msg = _mapper.Map<Message>(upd.MessageNew.Message);
            ExtractUserIdFromConversation(msg);
            await MessageNew(msg);
        }
        else if(upd.Type == GroupUpdateType.MessageEvent)
        {
            await MessageEvent(upd.MessageEvent);
        }
        else if(upd.Type == GroupUpdateType.GroupLeave)
        {
            await GroupLeave(upd.GroupLeave);
        }
        else if(upd.Type == GroupUpdateType.GroupJoin)
        {
            await GroupJoin(upd.GroupJoin);
        }
        else
        {
            _logger.Fatal("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {0} –Ω–µ –Ω–∞–π–¥–µ–Ω", upd.Type);
            throw new ArgumentOutOfRangeException(nameof(upd.Type), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è");
        }

        _logger.Information("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è {0} –∑–∞–≤–µ—Ä—à–µ–Ω–∞", upd.Type);

        void ExtractUserIdFromConversation(Message msg)
        {
            if(msg.ChatId == msg.UserId)
            {
                return;
            }

            var regEx = Regex.Match(msg.Text, @"\[club\d+\|.*\] (.*)");
            if(regEx.Groups.Count > 1)
            {
                msg.Text = regEx.Groups[1].Value.Trim();
            }
        }
    }

    private async Task MessageNew(Message message)
    {
        _logger.Debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è");
        await _commandsService.ExecuteCommand(message, OnSuccess, OnFailed);
        _logger.Information("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

        async Task OnSuccess(IResult res)
        {
            await _sender.Send(message.ChatId, res.Message, res.Keyboard);
        }

        async Task OnFailed(IResult res)
        {
            await _sender.Send(message.ChatId, res.Message, res.Keyboard);
        }
    }

    private async Task MessageEvent(MessageEvent messageEvent)
    {
        var mappedToMessage = _mapper.Map<Message>(messageEvent);
        await _commandsService.ExecuteCommand(mappedToMessage, OnSuccess, OnFailed);
        async Task OnSuccess(IResult res)
        {
            await _vkApi.Messages.EditAsync(new MessageEditParams()
            {
                PeerId = messageEvent.PeerId.GetValueOrDefault(0),
                ConversationMessageId = messageEvent.ConversationMessageId,
                Keyboard = KeyboardConverter.FromCoreToVk(res.Keyboard, true),
                Message = res.Message
            });
        }

        async Task OnFailed(IResult res)
        {
            await _vkApi.Messages.SendMessageEventAnswerAsync(messageEvent.EventId,
                                                              messageEvent.UserId.GetValueOrDefault(0),
                                                              messageEvent.PeerId.GetValueOrDefault(0),
                                                              new EventData()
                                                              {
                                                                  Type = MessageEventType.SnowSnackbar,
                                                                  Text = res.Message
                                                              });
        }
    }

    public async Task GroupLeave(GroupLeave leave)
    {
        const string groupLeaveMessage = "–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã üò¢\n" +
                                         "–ï—Å–ª–∏ —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —Ç—ã –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è —Å –±–æ—Ç–æ–º, —Ç–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å " +
                                         "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É '–∞–¥–º–∏–Ω *—Å–æ–æ–±—â–µ–Ω–∏–µ*' (–ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–∏ –≤ —Å–ø—Ä–∞–≤–∫–µ).";

        _logger.Information("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id{0} –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É", leave.UserId);
        await SendMessageToAdmins(leave.UserId.Value, "–æ—Ç–ø–∏—Å–∞–ª—Å—è :–°");

        if(leave.IsSelf.HasValue && !leave.IsSelf.Value)
        {
            return;
        }

        await TrySendMessageToUser(leave.UserId.Value, groupLeaveMessage);
    }

    public async Task GroupJoin(GroupJoin join)
    {
        const string groupJoinMessage = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! ‚ù§\n" +
                                        "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –±–æ—Ç–∞ " +
                                        "–ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã '–∞–¥–º–∏–Ω *—Å–æ–æ–±—â–µ–Ω–∏–µ*' (–ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–∏ –≤ —Å–ø—Ä–∞–≤–∫–µ)";

        _logger.Information("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id{0} –≤—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—É", join.UserId);
        await SendMessageToAdmins(join.UserId.Value, "–ø–æ–¥–ø–∏—Å–∞–ª—Å—è!");

        if(join.JoinType.HasValue && join.JoinType != GroupJoinType.Join)
        {
            return;
        }

        await TrySendMessageToUser(join.UserId.Value, groupJoinMessage);
    }

    private async Task TrySendMessageToUser(long userId, string message)
    {
        try
        {
            await _sender.Send(userId, message);
        }
        catch
        {
            // ignored
        }
    }

    private async Task SendMessageToAdmins(long userId, string message)
    {
        var admins = _db.BotUsers.Where(x => x.IsAdmin &&
                                             x.ConsumerType == ConsumerType.Vkontakte)
                        .Select(x => x.Id);
        var vkUser = (await _vkApi.Users.GetAsync(new[] { userId })).First();
        var userName = $"{vkUser.FirstName} {vkUser.LastName}";
        await _sender.SendToMany(admins, $"@id{userId} ({userName}) {message}");
    }
}